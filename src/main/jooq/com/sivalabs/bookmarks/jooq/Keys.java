/*
 * This file is generated by jOOQ.
 */
package com.sivalabs.bookmarks.jooq;


import com.sivalabs.bookmarks.jooq.tables.Addresses;
import com.sivalabs.bookmarks.jooq.tables.BookmarkTag;
import com.sivalabs.bookmarks.jooq.tables.Bookmarks;
import com.sivalabs.bookmarks.jooq.tables.Tags;
import com.sivalabs.bookmarks.jooq.tables.Users;
import com.sivalabs.bookmarks.jooq.tables.records.AddressesRecord;
import com.sivalabs.bookmarks.jooq.tables.records.BookmarkTagRecord;
import com.sivalabs.bookmarks.jooq.tables.records.BookmarksRecord;
import com.sivalabs.bookmarks.jooq.tables.records.TagsRecord;
import com.sivalabs.bookmarks.jooq.tables.records.UsersRecord;

import org.jooq.ForeignKey;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;


/**
 * A class modelling foreign key relationships and constraints of tables in the
 * default schema.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Keys {

    // -------------------------------------------------------------------------
    // UNIQUE and PRIMARY KEY definitions
    // -------------------------------------------------------------------------

    public static final UniqueKey<AddressesRecord> CONSTRAINT_D = Internal.createUniqueKey(Addresses.ADDRESSES, DSL.name("CONSTRAINT_D"), new TableField[] { Addresses.ADDRESSES.ID }, true);
    public static final UniqueKey<BookmarksRecord> CONSTRAINT_1F = Internal.createUniqueKey(Bookmarks.BOOKMARKS, DSL.name("CONSTRAINT_1F"), new TableField[] { Bookmarks.BOOKMARKS.ID }, true);
    public static final UniqueKey<TagsRecord> CONSTRAINT_2 = Internal.createUniqueKey(Tags.TAGS, DSL.name("CONSTRAINT_2"), new TableField[] { Tags.TAGS.ID }, true);
    public static final UniqueKey<TagsRecord> TAG_NAME_UNIQUE = Internal.createUniqueKey(Tags.TAGS, DSL.name("TAG_NAME_UNIQUE"), new TableField[] { Tags.TAGS.NAME }, true);
    public static final UniqueKey<UsersRecord> CONSTRAINT_4D = Internal.createUniqueKey(Users.USERS, DSL.name("CONSTRAINT_4D"), new TableField[] { Users.USERS.ID }, true);
    public static final UniqueKey<UsersRecord> USER_EMAIL_UNIQUE = Internal.createUniqueKey(Users.USERS, DSL.name("USER_EMAIL_UNIQUE"), new TableField[] { Users.USERS.EMAIL }, true);

    // -------------------------------------------------------------------------
    // FOREIGN KEY definitions
    // -------------------------------------------------------------------------

    public static final ForeignKey<BookmarkTagRecord, BookmarksRecord> CONSTRAINT_F = Internal.createForeignKey(BookmarkTag.BOOKMARK_TAG, DSL.name("CONSTRAINT_F"), new TableField[] { BookmarkTag.BOOKMARK_TAG.BOOKMARK_ID }, Keys.CONSTRAINT_1F, new TableField[] { Bookmarks.BOOKMARKS.ID }, true);
    public static final ForeignKey<BookmarkTagRecord, TagsRecord> CONSTRAINT_FE = Internal.createForeignKey(BookmarkTag.BOOKMARK_TAG, DSL.name("CONSTRAINT_FE"), new TableField[] { BookmarkTag.BOOKMARK_TAG.TAG_ID }, Keys.CONSTRAINT_2, new TableField[] { Tags.TAGS.ID }, true);
    public static final ForeignKey<BookmarksRecord, UsersRecord> CONSTRAINT_1 = Internal.createForeignKey(Bookmarks.BOOKMARKS, DSL.name("CONSTRAINT_1"), new TableField[] { Bookmarks.BOOKMARKS.CREATED_BY }, Keys.CONSTRAINT_4D, new TableField[] { Users.USERS.ID }, true);
    public static final ForeignKey<UsersRecord, AddressesRecord> CONSTRAINT_4 = Internal.createForeignKey(Users.USERS, DSL.name("CONSTRAINT_4"), new TableField[] { Users.USERS.ADDR_ID }, Keys.CONSTRAINT_D, new TableField[] { Addresses.ADDRESSES.ID }, true);
}
