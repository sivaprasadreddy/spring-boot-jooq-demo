/*
 * This file is generated by jOOQ.
 */
package com.sivalabs.bookmarks.jooq.tables;


import com.sivalabs.bookmarks.jooq.Keys;
import com.sivalabs.bookmarks.jooq.Public;
import com.sivalabs.bookmarks.jooq.tables.records.UserPreferencesRecord;

import java.time.OffsetDateTime;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function5;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class UserPreferences extends TableImpl<UserPreferencesRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.user_preferences</code>
     */
    public static final UserPreferences USER_PREFERENCES = new UserPreferences();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<UserPreferencesRecord> getRecordType() {
        return UserPreferencesRecord.class;
    }

    /**
     * The column <code>public.user_preferences.id</code>.
     */
    public final TableField<UserPreferencesRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.user_preferences.theme</code>.
     */
    public final TableField<UserPreferencesRecord, String> THEME = createField(DSL.name("theme"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.user_preferences.language</code>.
     */
    public final TableField<UserPreferencesRecord, String> LANGUAGE = createField(DSL.name("language"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.user_preferences.created_at</code>.
     */
    public final TableField<UserPreferencesRecord, OffsetDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "");

    /**
     * The column <code>public.user_preferences.updated_at</code>.
     */
    public final TableField<UserPreferencesRecord, OffsetDateTime> UPDATED_AT = createField(DSL.name("updated_at"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "");

    private UserPreferences(Name alias, Table<UserPreferencesRecord> aliased) {
        this(alias, aliased, null);
    }

    private UserPreferences(Name alias, Table<UserPreferencesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.user_preferences</code> table reference
     */
    public UserPreferences(String alias) {
        this(DSL.name(alias), USER_PREFERENCES);
    }

    /**
     * Create an aliased <code>public.user_preferences</code> table reference
     */
    public UserPreferences(Name alias) {
        this(alias, USER_PREFERENCES);
    }

    /**
     * Create a <code>public.user_preferences</code> table reference
     */
    public UserPreferences() {
        this(DSL.name("user_preferences"), null);
    }

    public <O extends Record> UserPreferences(Table<O> child, ForeignKey<O, UserPreferencesRecord> key) {
        super(child, key, USER_PREFERENCES);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<UserPreferencesRecord, Long> getIdentity() {
        return (Identity<UserPreferencesRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<UserPreferencesRecord> getPrimaryKey() {
        return Keys.USER_PREFERENCES_PKEY;
    }

    @Override
    public UserPreferences as(String alias) {
        return new UserPreferences(DSL.name(alias), this);
    }

    @Override
    public UserPreferences as(Name alias) {
        return new UserPreferences(alias, this);
    }

    @Override
    public UserPreferences as(Table<?> alias) {
        return new UserPreferences(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public UserPreferences rename(String name) {
        return new UserPreferences(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public UserPreferences rename(Name name) {
        return new UserPreferences(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public UserPreferences rename(Table<?> name) {
        return new UserPreferences(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<Long, String, String, OffsetDateTime, OffsetDateTime> fieldsRow() {
        return (Row5) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function5<? super Long, ? super String, ? super String, ? super OffsetDateTime, ? super OffsetDateTime, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function5<? super Long, ? super String, ? super String, ? super OffsetDateTime, ? super OffsetDateTime, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
