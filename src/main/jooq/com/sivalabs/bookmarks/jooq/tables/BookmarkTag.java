/*
 * This file is generated by jOOQ.
 */
package com.sivalabs.bookmarks.jooq.tables;


import com.sivalabs.bookmarks.jooq.Keys;
import com.sivalabs.bookmarks.jooq.Public;
import com.sivalabs.bookmarks.jooq.tables.records.BookmarkTagRecord;

import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function2;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class BookmarkTag extends TableImpl<BookmarkTagRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.bookmark_tag</code>
     */
    public static final BookmarkTag BOOKMARK_TAG = new BookmarkTag();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<BookmarkTagRecord> getRecordType() {
        return BookmarkTagRecord.class;
    }

    /**
     * The column <code>public.bookmark_tag.bookmark_id</code>.
     */
    public final TableField<BookmarkTagRecord, Long> BOOKMARK_ID = createField(DSL.name("bookmark_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.bookmark_tag.tag_id</code>.
     */
    public final TableField<BookmarkTagRecord, Long> TAG_ID = createField(DSL.name("tag_id"), SQLDataType.BIGINT.nullable(false), this, "");

    private BookmarkTag(Name alias, Table<BookmarkTagRecord> aliased) {
        this(alias, aliased, null);
    }

    private BookmarkTag(Name alias, Table<BookmarkTagRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.bookmark_tag</code> table reference
     */
    public BookmarkTag(String alias) {
        this(DSL.name(alias), BOOKMARK_TAG);
    }

    /**
     * Create an aliased <code>public.bookmark_tag</code> table reference
     */
    public BookmarkTag(Name alias) {
        this(alias, BOOKMARK_TAG);
    }

    /**
     * Create a <code>public.bookmark_tag</code> table reference
     */
    public BookmarkTag() {
        this(DSL.name("bookmark_tag"), null);
    }

    public <O extends Record> BookmarkTag(Table<O> child, ForeignKey<O, BookmarkTagRecord> key) {
        super(child, key, BOOKMARK_TAG);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public List<ForeignKey<BookmarkTagRecord, ?>> getReferences() {
        return Arrays.asList(Keys.BOOKMARK_TAG__BOOKMARK_TAG_BOOKMARK_ID_FKEY, Keys.BOOKMARK_TAG__BOOKMARK_TAG_TAG_ID_FKEY);
    }

    private transient Bookmarks _bookmarks;
    private transient Tags _tags;

    /**
     * Get the implicit join path to the <code>public.bookmarks</code> table.
     */
    public Bookmarks bookmarks() {
        if (_bookmarks == null)
            _bookmarks = new Bookmarks(this, Keys.BOOKMARK_TAG__BOOKMARK_TAG_BOOKMARK_ID_FKEY);

        return _bookmarks;
    }

    /**
     * Get the implicit join path to the <code>public.tags</code> table.
     */
    public Tags tags() {
        if (_tags == null)
            _tags = new Tags(this, Keys.BOOKMARK_TAG__BOOKMARK_TAG_TAG_ID_FKEY);

        return _tags;
    }

    @Override
    public BookmarkTag as(String alias) {
        return new BookmarkTag(DSL.name(alias), this);
    }

    @Override
    public BookmarkTag as(Name alias) {
        return new BookmarkTag(alias, this);
    }

    @Override
    public BookmarkTag as(Table<?> alias) {
        return new BookmarkTag(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public BookmarkTag rename(String name) {
        return new BookmarkTag(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public BookmarkTag rename(Name name) {
        return new BookmarkTag(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public BookmarkTag rename(Table<?> name) {
        return new BookmarkTag(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<Long, Long> fieldsRow() {
        return (Row2) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function2<? super Long, ? super Long, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function2<? super Long, ? super Long, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
