/*
 * This file is generated by jOOQ.
 */
package com.sivalabs.bookmarks.jooq.tables.daos;


import com.sivalabs.bookmarks.jooq.tables.Addresses;
import com.sivalabs.bookmarks.jooq.tables.pojos.JooqAddresses;
import com.sivalabs.bookmarks.jooq.tables.records.AddressesRecord;

import java.util.List;
import java.util.Optional;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AddressesRepository extends DAOImpl<AddressesRecord, JooqAddresses, Long> {

    /**
     * Create a new AddressesRepository without any configuration
     */
    public AddressesRepository() {
        super(Addresses.ADDRESSES, JooqAddresses.class);
    }

    /**
     * Create a new AddressesRepository with an attached configuration
     */
    public AddressesRepository(Configuration configuration) {
        super(Addresses.ADDRESSES, JooqAddresses.class, configuration);
    }

    @Override
    public Long getId(JooqAddresses object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>ID BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<JooqAddresses> fetchRangeOfId(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(Addresses.ADDRESSES.ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>ID IN (values)</code>
     */
    public List<JooqAddresses> fetchById(Long... values) {
        return fetch(Addresses.ADDRESSES.ID, values);
    }

    /**
     * Fetch a unique record that has <code>ID = value</code>
     */
    public JooqAddresses fetchOneById(Long value) {
        return fetchOne(Addresses.ADDRESSES.ID, value);
    }

    /**
     * Fetch a unique record that has <code>ID = value</code>
     */
    public Optional<JooqAddresses> fetchOptionalById(Long value) {
        return fetchOptional(Addresses.ADDRESSES.ID, value);
    }

    /**
     * Fetch records that have <code>STREET BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<JooqAddresses> fetchRangeOfStreet(String lowerInclusive, String upperInclusive) {
        return fetchRange(Addresses.ADDRESSES.STREET, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>STREET IN (values)</code>
     */
    public List<JooqAddresses> fetchByStreet(String... values) {
        return fetch(Addresses.ADDRESSES.STREET, values);
    }

    /**
     * Fetch records that have <code>CITY BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<JooqAddresses> fetchRangeOfCity(String lowerInclusive, String upperInclusive) {
        return fetchRange(Addresses.ADDRESSES.CITY, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>CITY IN (values)</code>
     */
    public List<JooqAddresses> fetchByCity(String... values) {
        return fetch(Addresses.ADDRESSES.CITY, values);
    }

    /**
     * Fetch records that have <code>STATE BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<JooqAddresses> fetchRangeOfState(String lowerInclusive, String upperInclusive) {
        return fetchRange(Addresses.ADDRESSES.STATE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>STATE IN (values)</code>
     */
    public List<JooqAddresses> fetchByState(String... values) {
        return fetch(Addresses.ADDRESSES.STATE, values);
    }

    /**
     * Fetch records that have <code>ZIP BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<JooqAddresses> fetchRangeOfZip(String lowerInclusive, String upperInclusive) {
        return fetchRange(Addresses.ADDRESSES.ZIP, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>ZIP IN (values)</code>
     */
    public List<JooqAddresses> fetchByZip(String... values) {
        return fetch(Addresses.ADDRESSES.ZIP, values);
    }

    /**
     * Fetch records that have <code>COUNTRY BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<JooqAddresses> fetchRangeOfCountry(String lowerInclusive, String upperInclusive) {
        return fetchRange(Addresses.ADDRESSES.COUNTRY, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>COUNTRY IN (values)</code>
     */
    public List<JooqAddresses> fetchByCountry(String... values) {
        return fetch(Addresses.ADDRESSES.COUNTRY, values);
    }
}
