/*
 * This file is generated by jOOQ.
 */
package com.sivalabs.bookmarks.jooq.tables.daos;


import com.sivalabs.bookmarks.jooq.tables.Bookmarks;
import com.sivalabs.bookmarks.jooq.tables.pojos.JooqBookmarks;
import com.sivalabs.bookmarks.jooq.tables.records.BookmarksRecord;

import java.time.LocalDateTime;
import java.util.List;
import java.util.Optional;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class BookmarksRepository extends DAOImpl<BookmarksRecord, JooqBookmarks, Long> {

    /**
     * Create a new BookmarksRepository without any configuration
     */
    public BookmarksRepository() {
        super(Bookmarks.BOOKMARKS, JooqBookmarks.class);
    }

    /**
     * Create a new BookmarksRepository with an attached configuration
     */
    public BookmarksRepository(Configuration configuration) {
        super(Bookmarks.BOOKMARKS, JooqBookmarks.class, configuration);
    }

    @Override
    public Long getId(JooqBookmarks object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<JooqBookmarks> fetchRangeOfId(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(Bookmarks.BOOKMARKS.ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    public List<JooqBookmarks> fetchById(Long... values) {
        return fetch(Bookmarks.BOOKMARKS.ID, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public JooqBookmarks fetchOneById(Long value) {
        return fetchOne(Bookmarks.BOOKMARKS.ID, value);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public Optional<JooqBookmarks> fetchOptionalById(Long value) {
        return fetchOptional(Bookmarks.BOOKMARKS.ID, value);
    }

    /**
     * Fetch records that have <code>url BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<JooqBookmarks> fetchRangeOfUrl(String lowerInclusive, String upperInclusive) {
        return fetchRange(Bookmarks.BOOKMARKS.URL, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>url IN (values)</code>
     */
    public List<JooqBookmarks> fetchByUrl(String... values) {
        return fetch(Bookmarks.BOOKMARKS.URL, values);
    }

    /**
     * Fetch records that have <code>title BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<JooqBookmarks> fetchRangeOfTitle(String lowerInclusive, String upperInclusive) {
        return fetchRange(Bookmarks.BOOKMARKS.TITLE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>title IN (values)</code>
     */
    public List<JooqBookmarks> fetchByTitle(String... values) {
        return fetch(Bookmarks.BOOKMARKS.TITLE, values);
    }

    /**
     * Fetch records that have <code>created_by BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<JooqBookmarks> fetchRangeOfCreatedBy(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(Bookmarks.BOOKMARKS.CREATED_BY, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>created_by IN (values)</code>
     */
    public List<JooqBookmarks> fetchByCreatedBy(Long... values) {
        return fetch(Bookmarks.BOOKMARKS.CREATED_BY, values);
    }

    /**
     * Fetch records that have <code>created_at BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<JooqBookmarks> fetchRangeOfCreatedAt(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(Bookmarks.BOOKMARKS.CREATED_AT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>created_at IN (values)</code>
     */
    public List<JooqBookmarks> fetchByCreatedAt(LocalDateTime... values) {
        return fetch(Bookmarks.BOOKMARKS.CREATED_AT, values);
    }

    /**
     * Fetch records that have <code>updated_at BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<JooqBookmarks> fetchRangeOfUpdatedAt(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(Bookmarks.BOOKMARKS.UPDATED_AT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>updated_at IN (values)</code>
     */
    public List<JooqBookmarks> fetchByUpdatedAt(LocalDateTime... values) {
        return fetch(Bookmarks.BOOKMARKS.UPDATED_AT, values);
    }
}
