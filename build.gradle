import nu.studer.gradle.jooq.JooqEdition
import org.testcontainers.containers.PostgreSQLContainer

buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
    }
    dependencies {
        classpath 'org.testcontainers:postgresql:1.17.3'
        classpath 'org.postgresql:postgresql:42.3.6'
    }
}

plugins {
    id 'java'
    id 'jacoco'
    id 'org.springframework.boot' version '2.7.3'
    id 'io.spring.dependency-management' version '1.0.13.RELEASE'
    id 'nu.studer.jooq' version '7.1.1'
    id 'org.flywaydb.flyway' version '8.5.13'
}

group = 'com.sivalabs'
version = '0.0.1'

java {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}

configurations {
    flywayMigration
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenLocal()
    mavenCentral()
    maven { url 'https://repo.spring.io/milestone' }
}

def jooqVersion = "3.17.2"

ext {
    set('testcontainersVersion', "1.17.3")
    set('jooq.version', jooqVersion)
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-jooq'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-web'

    implementation 'org.flywaydb:flyway-core'
    compileOnly 'org.projectlombok:lombok'
    testImplementation 'org.projectlombok:lombok'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    runtimeOnly 'com.h2database:h2'
    runtimeOnly 'org.postgresql:postgresql'
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
    annotationProcessor 'org.projectlombok:lombok'

    testImplementation "org.springframework.boot:spring-boot-starter-test"
    testImplementation "org.testcontainers:junit-jupiter"
    testImplementation "org.testcontainers:postgresql"

    flywayMigration 'org.postgresql:postgresql:42.3.6'
    jooqGenerator 'org.postgresql:postgresql:42.3.6'
    jooqGenerator 'jakarta.xml.bind:jakarta.xml.bind-api:4.0.0'
    jooqGenerator 'org.testcontainers:postgresql:1.17.3'
}

dependencyManagement {
    imports {
        mavenBom "org.testcontainers:testcontainers-bom:${testcontainersVersion}"
    }
}

test {
    useJUnitPlatform()
    testLogging {
        events = ["PASSED", "FAILED", "SKIPPED"]
        showStandardStreams = true
        exceptionFormat = "full"
    }
}

task postgresContainer {
    var instance = new PostgreSQLContainer<>("postgres:14-alpine")
            .withDatabaseName("integration-tests-db")
            .withUsername("sa")
            .withPassword("sa")
    instance.start()
    postgresContainer.ext.jdbcUrl = instance.getJdbcUrl()
    postgresContainer.ext.username = instance.getUsername()
    postgresContainer.ext.password = instance.getPassword()
    postgresContainer.ext.databaseName = instance.getDatabaseName()
    postgresContainer.ext.instance = instance
}

flyway {
    configurations = ['flywayMigration']
    url = postgresContainer.jdbcUrl
    user = postgresContainer.username
    password = postgresContainer.password
}

jooq {
    version = jooqVersion
    //version = dependencyManagement.importedProperties['jooq.version']
    edition = JooqEdition.OSS

    configurations {
        main {
            generateSchemaSourceOnCompilation = true

            generationTool {
                logging = org.jooq.meta.jaxb.Logging.WARN
                jdbc {
                    driver = 'org.postgresql.Driver'
                    url = postgresContainer.jdbcUrl
                    user = postgresContainer.username
                    password = postgresContainer.password
                }
                generator {
                    name = 'org.jooq.codegen.DefaultGenerator'
                    database {
                        name = 'org.jooq.meta.postgres.PostgresDatabase'
                        inputSchema = 'public'
                    }
                    generate {
                        deprecated = false
                        records = true
                        immutablePojos = true
                        fluentSetters = true
                    }
                    target {
                        packageName = 'com.sivalabs.bookmarks.jooq'
                        directory = 'src/main/jooq'
                    }
                }
            }
        }
    }
}

// configure jOOQ task such that it only executes when something has changed that potentially affects the generated JOOQ sources
// - the jOOQ configuration has changed (Jdbc, Generator, Strategy, etc.)
// - the classpath used to execute the jOOQ generation tool has changed (jOOQ library, database driver, strategy classes, etc.)
// - the schema files from which the schema is generated and which is used by jOOQ to generate the sources have changed (scripts added, modified, etc.)
tasks.named('generateJooq').configure {
    // ensure database schema has been prepared by Flyway before generating the jOOQ sources
    dependsOn tasks.named('postgresContainer')
    dependsOn tasks.named('flywayMigrate')

    // declare Flyway migration scripts as inputs on the jOOQ task
    inputs.files(fileTree('src/main/resources/db/migration'))
            .withPropertyName('migrations')
            .withPathSensitivity(PathSensitivity.RELATIVE)

    // make jOOQ task participate in incremental builds (and build caching)
    allInputsDeclared = true

    doLast {
        postgresContainer.instance.stop()
    }
}
